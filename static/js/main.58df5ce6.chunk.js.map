{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","error","info","this","setState","hasError","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","App","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.58df5ce6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200*200`} alt=\"Robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return(\r\n            <Card key ={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n  return(\r\n    <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type = 'search'\r\n      placeholder='Search Robots'\r\n      onChange={onSearchChange}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style = {{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      \"hasError\" : false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({\"hasError\" : true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n        return <h1> Something went wrong !! </h1>\r\n    }\r\n    return this.props.children;\r\n\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count : 0\r\n        }\r\n\r\n    }\r\n\r\n    shouldComponentUpdate (nextProps, nextState){\r\n        if(this.state.count !== nextState.count){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () =>{\r\n        this.setState(state => {\r\n            return {count : state.count + 1}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count : {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\nclass Header extends Component{\r\n    constructor(){\r\n        super()\r\n    }\r\n\r\n    // shouldComponentUpdate (nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n\r\n    render(){\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>\r\n            \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport {setSearchField, requestRobots} from '../actions';\r\nimport Header from '../components/Header';\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField : state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots : () => dispatch(requestRobots())\r\n  }\r\n\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount(){\r\n      this.props.onRequestRobots();\r\n  }\r\n\r\n  /*onSearchChange = (event) => {\r\n    this.setState({searchField : event.target.value})\r\n  }*/\r\n\r\n  render(){\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n        <Header></Header>\r\n        <SearchBox onSearchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type : CHANGE_SEARCH_FIELD,\r\n  payload : text\r\n})\r\n\r\n\r\n\r\nexport const requestRobots = () => (dispatch) =>  {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type : REQUEST_ROBOTS_FAILED, payload : error}));\r\n}\r\n","\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField : ''\r\n}\r\n\r\nconst initialStateRobots ={\r\n  isPending : false,\r\n  robots : [],\r\n  error : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, {searchField : action.payload});\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending : true});\r\n      break;\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n      break;\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false});\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}